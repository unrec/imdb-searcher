type Query {
    movieSearch(name: String, director: String, writer: String, genre: String, minRating: Float, minVotes: Int, limit: Int): [Movie]
    movie(titleId: ID!): Basic
    tvSeries(titleId: ID!): Series
    episode(titleId: ID!): Episode
    rating(titleId: ID!): Rating
    person(name: String!, profession: String): [Person]
}

type Movie {
    id: ID!,
    type: String!,
    title: String!,
    year: Int,
    runtime: Int,
    directors: String,
    writers: String,
    genres: String,
    rating: Float,
    votes: Int
}

type Basic {
    titleId: ID!
    titleType: String
    primaryTitle: String
    originalTitle: String
    isAdult: Boolean!
    startYear: Int
    endYear: Int
    runtimeMinutes: Int
    genres: String!
    rating: Rating
    principals: [Principal]
    directors: [Person]
    writers: [Person]
}

type Series {
    data: Basic
    totalSeasons: Int
    totalEpisodes: Int
    totalRuntime: Int
    seasons: [Season]
}

type Season {
    season: Int
    totalEpisodes: Int
}

type Episode {
    data: Basic
    parent: Basic
    season: Int
    episode: Int
}

type Rating {
    titleId: ID!
    averageRating: Float!
    numVotes: Int!
}

type Person {
    nameId: ID!
    primaryName: String
    birthYear: Int
    deathYear: Int
    primaryProfession: String
    knownForTitles: [Basic]
}

type Principal {
    person: Person
    category: String
    job: String
    characters: [String]
}